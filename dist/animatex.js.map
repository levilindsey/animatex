{"version":3,"sources":["node_modules/browser-pack/_prelude.js","index.js","src/animation-job.js","src/animator.js","src/frame-latency-profiler.js","src/persistent-animation-job.js","src/transient-animation-job.js","src/util.js"],"names":[],"mappings":"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","file":"animatex.js","sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()","export * from './src/animation-job';\nexport * from './src/animator';\nexport * from './src/frame-latency-profiler';\nexport * from './src/persistent-animation-job';\nexport * from './src/transient-animation-job';\n","/**\n * An AnimationJob is used with the animator controller to update and re-draw something each frame.\n *\n * @abstract\n */\nclass AnimationJob {\n  /**\n   * @param {Function} [onComplete] A callback to be called when this AnimationJob is finished.\n   */\n  constructor(onComplete) {\n    // AnimationJob is an abstract class. It should not be instantiated directly.\n    if (new.target === AnimationJob) {\n      throw new TypeError('Cannot construct AnimationJob instances directly');\n    }\n\n    this._startTime = 0;\n    this._isComplete = true;\n    this._onComplete = onComplete;\n  }\n\n  /**\n   * Indicates whether this AnimationJob is complete.\n   *\n   * @return {boolean}\n   */\n  get isComplete() {\n    return this._isComplete;\n  }\n\n  /**\n   * Sets this AnimationJob as started.\n   *\n   * @param {DOMHighResTimeStamp} startTime\n   */\n  start(startTime) {\n    this._startTime = startTime;\n    this._isComplete = false;\n  }\n\n  /**\n   * Updates the animation progress of this AnimationJob to match the given time.\n   *\n   * This is called from the overall animation loop.\n   *\n   * @param {DOMHighResTimeStamp} currentTime\n   * @param {DOMHighResTimeStamp} deltaTime\n   * @abstract\n   */\n  update(currentTime, deltaTime) {\n    // Extending classes should implement this method.\n    throw new TypeError('Method not implemented');\n  }\n\n  /**\n   * Draws the current state of this AnimationJob.\n   *\n   * This is called from the overall animation loop.\n   *\n   * @abstract\n   */\n  draw() {\n    // Extending classes should implement this method.\n    throw new TypeError('Method not implemented');\n  }\n\n  /**\n   * Handles any necessary state for this AnimationJob being finished.\n   *\n   * @param {boolean} isCancelled\n   */\n  finish(isCancelled) {\n    console.log(`${this.constructor.name} ${isCancelled ? 'cancelled' : 'completed'}`);\n\n    this._isComplete = true;\n\n    if (this._onComplete) {\n      this._onComplete();\n    }\n  }\n}\n\nexport {AnimationJob};\n","import {FrameLatencyProfiler} from './frame-latency-profiler';\nimport {PersistentAnimationJob} from './persistent-animation-job';\nimport {TransientAnimationJob} from './transient-animation-job';\n\nconst _DELTA_TIME_UPPER_THRESHOLD = 200;\nconst _FRAME_DURATION_WARNING_THRESHOLD = 1000 / 30;\nconst _FRAME_LATENCY_LOG_PERIOD = 5000;\nconst _LATENCY_LOG_LABEL = 'Animation frame period';\n\n/**\n * This class handles the animation loop.\n *\n * This class's responsibilities include:\n * - updating modules for the current frame,\n * - drawing renderables for the current frame,\n * - starting and stopping transient animation jobs,\n * - capping time step durations at a max threshold.\n */\nclass Animator {\n  constructor() {\n    this._jobs = [];\n    this._previousTime = null;\n    this._isPaused = true;\n    this._requestAnimationFrameId = null;\n    this._totalUnpausedRunTime = 0;\n    this._lastUnpauseTime = null;\n    this._latencyProfiler = new FrameLatencyProfiler(_FRAME_LATENCY_LOG_PERIOD,\n        _FRAME_DURATION_WARNING_THRESHOLD, _LATENCY_LOG_LABEL);\n  }\n\n  /**\n   * Starts the given AnimationJob.\n   *\n   * @param {AnimationJob} job\n   */\n  startJob(job) {\n    // Is this a restart?\n    if (!job.isComplete) {\n      console.debug(`Restarting AnimationJob: ${job.constructor.name}`);\n\n      if (job instanceof PersistentAnimationJob) {\n        job.reset();\n      } else {\n        job.finish(true);\n        job.start(window.performance.now());\n      }\n    } else {\n      console.debug(`Starting AnimationJob: ${job.constructor.name}`);\n\n      job.start(this._previousTime);\n      this._jobs.push(job);\n    }\n\n    this._startAnimationLoop();\n  }\n\n  /**\n   * Cancels the given AnimationJob.\n   *\n   * @param {AnimationJob} job\n   */\n  cancelJob(job) {\n    console.debug(`Cancelling AnimationJob: ${job.constructor.name}`);\n    job.finish(true);\n  }\n\n  /**\n   * Cancels all running AnimationJobs.\n   */\n  cancelAll() {\n    while (this._jobs.length) {\n      this.cancelJob(this._jobs[0]);\n    }\n  }\n\n  /** @returns {DOMHighResTimeStamp} */\n  get currentTime() {\n    return this._previousTime;\n  }\n\n  /** @returns {boolean} */\n  get isPaused() {\n    return this._isPaused;\n  }\n\n  pause() {\n    this._stopAnimationLoop();\n    console.debug('Animator paused');\n  }\n\n  unpause() {\n    this._startAnimationLoop();\n    console.debug('Animator unpaused');\n  }\n\n  /**\n   * This is the animation loop that drives all of the animation.\n   *\n   * @param {DOMHighResTimeStamp} currentTime\n   * @private\n   */\n  _animationLoop(currentTime) {\n    // When pausing and restarting, it's possible for the previous time to be slightly inconsistent\n    // with the animationFrame time.\n    if (currentTime < this._previousTime) {\n      this._previousTime = currentTime - 1;\n    }\n\n    let deltaTime = currentTime - this._previousTime;\n    this._previousTime = currentTime;\n\n    this._latencyProfiler.recordFrameLatency(deltaTime);\n\n    // Large delays between frames can cause lead to instability in the system, so this caps them to\n    // a max threshold.\n    deltaTime = deltaTime > _DELTA_TIME_UPPER_THRESHOLD ?\n        _DELTA_TIME_UPPER_THRESHOLD : deltaTime;\n\n    if (!this._isPaused) {\n      this._requestAnimationFrameId =\n          window.requestAnimationFrame(currentTime => this._animationLoop(currentTime));\n      this._updateJobs(currentTime, deltaTime);\n      this._drawJobs();\n    }\n  }\n\n  /**\n   * Updates all of the active AnimationJobs.\n   *\n   * @param {DOMHighResTimeStamp} currentTime\n   * @param {DOMHighResTimeStamp} deltaTime\n   * @private\n   */\n  _updateJobs(currentTime, deltaTime) {\n    for (let i = 0, count = this._jobs.length; i < count; i++) {\n      let job = this._jobs[i];\n\n      // Remove jobs from the list after they are complete.\n      if (job.isComplete) {\n        this._removeJob(job, i);\n        i--;\n        count--;\n        continue;\n      }\n\n      // Check whether the job is transient and has reached its end.\n      if (job instanceof TransientAnimationJob && job.endTime < currentTime) {\n        job.finish(false);\n      } else {\n        job.update(currentTime, deltaTime);\n      }\n    }\n  }\n\n  /**\n   * Removes the given job from the collection of active, animating jobs.\n   *\n   * @param {AnimationJob} job\n   * @param {number} [index=-1]\n   * @private\n   */\n  _removeJob(job, index = -1) {\n    console.debug(`Removing AnimationJob: ${job.constructor.name}`);\n\n    if (index >= 0) {\n      this._jobs.splice(index, 1);\n    } else {\n      const count = this._jobs.length;\n      for (index = 0; index < count; index++) {\n        if (this._jobs[index] === job) {\n          this._jobs.splice(index, 1);\n          break;\n        }\n      }\n    }\n\n    // Stop the animation loop when there are no more jobs to animate.\n    if (this._jobs.length === 0) {\n      this._stopAnimationLoop();\n    }\n  }\n\n  /**\n   * Draws all of the active AnimationJobs.\n   *\n   * @private\n   */\n  _drawJobs() {\n    for (let i = 0, count = this._jobs.length; i < count; i++) {\n      this._jobs[i].draw();\n    }\n  }\n\n  /**\n   * Starts the animation loop if it is not already running.\n   *\n   * This method is idempotent.\n   *\n   * @private\n   */\n  _startAnimationLoop() {\n    if (this._isPaused) {\n      this._lastUnpauseTime = window.performance.now();\n    }\n    this._isPaused = false;\n\n    // Only actually start the loop if it isn't already running and the page has focus.\n    if (!this._requestAnimationFrameId && !document.hidden) {\n      this._latencyProfiler.start();\n      this._previousTime = window.performance.now();\n      this._requestAnimationFrameId =\n          window.requestAnimationFrame(time => this._animationLoop(time));\n    }\n  }\n\n  /**\n   * Stops the animation loop.\n   *\n   * @private\n   */\n  _stopAnimationLoop() {\n    if (!this._isPaused) {\n      this._totalUnpausedRunTime += this._timeSinceLastPaused;\n    }\n    this._isPaused = true;\n    window.cancelAnimationFrame(this._requestAnimationFrameId);\n    this._requestAnimationFrameId = null;\n    this._latencyProfiler.stop();\n  }\n\n  /**\n   * Creates a promise that will resolve on the next animation loop.\n   *\n   * @returns {Promise}\n   */\n  resolveOnNextFrame() {\n    return new Promise(window.requestAnimationFrame);\n  }\n\n  /**\n   * Gets the total amount of time the animator has been running while not paused.\n   *\n   * @returns {DOMHighResTimeStamp}\n   */\n  get totalRunTime() {\n    return this._isPaused\n        ? this._totalUnpausedRunTime\n        : this._totalUnpausedRunTime + this._timeSinceLastPaused;\n  }\n\n  /**\n   * @returns {DOMHighResTimeStamp}\n   */\n  get _timeSinceLastPaused() {\n    return window.performance.now() - this._lastUnpauseTime;\n  }\n}\n\nconst animator = new Animator();\n\nexport {animator};\n\n/**\n * @typedef {number} DOMHighResTimeStamp A number of milliseconds, accurate to one thousandth of a\n * millisecond.\n */\n\n","/**\n * This class keeps track of avg/min/max frame latencies over the last logging time period and\n * periodically logs these values.\n */\nclass FrameLatencyProfiler {\n  /**\n   * @param {number} logPeriod The period at which to print latency log messages. In milliseconds.\n   * @param {number} latencyWarningThreshold If the average latency exceeds this threshold, then the\n   * log message is shown as a warning. In milliseconds.\n   * @param {string} logLabel A label to show for each latency log message.\n   */\n  constructor(logPeriod, latencyWarningThreshold, logLabel) {\n    this._logPeriod = logPeriod;\n    this._latencyWarningThreshold = latencyWarningThreshold;\n    this._logLabel = logLabel;\n\n    this._frameCount = null;\n    this._maxFrameLatency = null;\n    this._minFrameLatency = null;\n    this._avgFrameLatency = null;\n\n    this._intervalId = null;\n  }\n\n  start() {\n    this.stop();\n    this.reset();\n\n    this._intervalId = setInterval(() => {\n      this.logFrameLatency();\n      this.reset();\n    }, this._logPeriod);\n  }\n\n  stop() {\n    clearInterval(this._intervalId);\n  }\n\n  reset() {\n    this._frameCount = 0;\n    this._maxFrameLatency = Number.MIN_VALUE;\n    this._minFrameLatency = Number.MAX_VALUE;\n    this._avgFrameLatency = 0;\n  }\n\n  /**\n   * Keeps track of a running average, min value, and max value for the frame latencies.\n   *\n   * @param {DOMHighResTimeStamp} frameLatency\n   */\n  recordFrameLatency(frameLatency) {\n    this._frameCount++;\n    this._maxFrameLatency =\n        this._maxFrameLatency < frameLatency ? frameLatency : this._maxFrameLatency;\n    this._minFrameLatency =\n        this._minFrameLatency > frameLatency ? frameLatency : this._minFrameLatency;\n    this._avgFrameLatency =\n        this._avgFrameLatency + (frameLatency - this._avgFrameLatency) / this._frameCount;\n  }\n\n  logFrameLatency() {\n    if (this._frameCount > 0) {\n      const message = `${this._logLabel}:  AVG=${this._avgFrameLatency.toFixed(3)}  ` +\n          `(MAX=${this._maxFrameLatency.toFixed(3)}; MIN=${this._minFrameLatency.toFixed(3)})`;\n      if (this._maxFrameLatency >= this._latencyWarningThreshold) {\n        console.warn(message);\n      } else {\n        console.debug(message);\n      }\n    }\n  }\n}\n\nexport {FrameLatencyProfiler};\n","import {AnimationJob} from './animation-job';\n\n/**\n * A PersistentAnimationJob recurs or has an indefinite duration.\n *\n * @abstract\n */\nclass PersistentAnimationJob extends AnimationJob {\n  /**\n   * @param {Function} [onComplete] A callback to be called when this AnimationJob is finished.\n   */\n  constructor(onComplete) {\n    super(onComplete);\n\n    // PersistentAnimationJob is an abstract class. It should not be instantiated directly.\n    if (new.target === PersistentAnimationJob) {\n      throw new TypeError('Cannot construct PersistentAnimationJob instances directly');\n    }\n  }\n\n  /**\n   * @abstract\n   */\n  reset() {\n    // Extending classes should implement this method.\n    throw new TypeError('Method not implemented');\n  }\n}\n\nexport {PersistentAnimationJob};\n","import {_util} from './util';\n\nimport {AnimationJob} from './animation-job';\n\n/**\n * A TransientAnimationJob is temporary and has a definite beginning and end.\n *\n * @abstract\n */\nclass TransientAnimationJob extends AnimationJob {\n  /**\n   * @param {number} duration\n   * @param {number} delay\n   * @param {Function|String} easingFunction\n   * @param {Function} [onComplete] A callback to be called when this AnimationJob is finished.\n   */\n  constructor(duration, delay, easingFunction, onComplete) {\n    super(onComplete);\n\n    // TransientAnimationJob is an abstract class. It should not be instantiated directly.\n    if (new.target === TransientAnimationJob) {\n      throw new TypeError('Cannot construct TransientAnimationJob instances directly');\n    }\n\n    this._duration = duration;\n    this._delay = delay;\n    this._easingFunction = typeof easingFunction === 'function'\n        ? easingFunction\n        : _util.easingFunctions[easingFunction];\n  }\n\n  /**\n   * @returns {number}\n   */\n  get endTime() {\n    return this._startTime + this._duration + this._delay;\n  }\n}\n\nexport {TransientAnimationJob};\n","/**\n * This module defines a collection of static utility functions.\n */\n\n// A collection of different types of easing functions.\nconst easingFunctions = {\n  linear: t => t,\n  easeInQuad: t => t * t,\n  easeOutQuad: t => t * (2 - t),\n  easeInOutQuad: t => t < 0.5 ? 2 * t * t : -1 + (4 - 2 * t) * t,\n  easeInCubic: t => t * t * t,\n  easeOutCubic: t => 1 + --t * t * t,\n  easeInOutCubic: t => t < 0.5 ? 4 * t * t * t : (t - 1) * (2 * t - 2) * (2 * t - 2) + 1,\n  easeInQuart: t => t * t * t * t,\n  easeOutQuart: t => 1 - --t * t * t * t,\n  easeInOutQuart: t => t < 0.5 ? 8 * t * t * t * t : 1 - 8 * --t * t * t * t,\n  easeInQuint: t => t * t * t * t * t,\n  easeOutQuint: t => 1 + --t * t * t * t * t,\n  easeInOutQuint: t => t < 0.5 ? 16 * t * t * t * t * t : 1 + 16 * --t * t * t * t * t\n};\n\nconst _util = {\n  easingFunctions,\n};\n\nexport {\n  _util,\n};\n"],"preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCJpbmRleC5qcyIsInNyYy9hbmltYXRpb24tam9iLmpzIiwic3JjL2FuaW1hdG9yLmpzIiwic3JjL2ZyYW1lLWxhdGVuY3ktcHJvZmlsZXIuanMiLCJzcmMvcGVyc2lzdGVudC1hbmltYXRpb24tam9iLmpzIiwic3JjL3RyYW5zaWVudC1hbmltYXRpb24tam9iLmpzIiwic3JjL3V0aWwuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7OztBQ0FBLE9BQUEsSUFBQSxDQUFBLGFBQUEsRUFBQSxPQUFBLENBQUEsVUFBQSxHQUFBLEVBQUE7QUFBQSxNQUFBLFFBQUEsU0FBQSxJQUFBLFFBQUEsWUFBQSxFQUFBO0FBQUEsU0FBQSxjQUFBLENBQUEsT0FBQSxFQUFBLEdBQUEsRUFBQTtBQUFBLGdCQUFBLElBQUE7QUFBQSxTQUFBLFNBQUEsR0FBQSxHQUFBO0FBQUEsYUFBQSxjQUFBLEdBQUEsQ0FBQTtBQUFBO0FBQUEsR0FBQTtBQUFBLENBQUE7Ozs7QUFDQSxPQUFBLElBQUEsQ0FBQSxTQUFBLEVBQUEsT0FBQSxDQUFBLFVBQUEsR0FBQSxFQUFBO0FBQUEsTUFBQSxRQUFBLFNBQUEsSUFBQSxRQUFBLFlBQUEsRUFBQTtBQUFBLFNBQUEsY0FBQSxDQUFBLE9BQUEsRUFBQSxHQUFBLEVBQUE7QUFBQSxnQkFBQSxJQUFBO0FBQUEsU0FBQSxTQUFBLEdBQUEsR0FBQTtBQUFBLGFBQUEsVUFBQSxHQUFBLENBQUE7QUFBQTtBQUFBLEdBQUE7QUFBQSxDQUFBOzs7O0FBQ0EsT0FBQSxJQUFBLENBQUEscUJBQUEsRUFBQSxPQUFBLENBQUEsVUFBQSxHQUFBLEVBQUE7QUFBQSxNQUFBLFFBQUEsU0FBQSxJQUFBLFFBQUEsWUFBQSxFQUFBO0FBQUEsU0FBQSxjQUFBLENBQUEsT0FBQSxFQUFBLEdBQUEsRUFBQTtBQUFBLGdCQUFBLElBQUE7QUFBQSxTQUFBLFNBQUEsR0FBQSxHQUFB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QVUsS0FBQSxDQUFBLEdBQUEsQ0FBQSxHQUFBLENBQUEsR0FBQSxDQUFBLEdBQVYsQ0FBQSxHQUFtQyxJQUFJLEtBQUssRUFBTCxDQUFBLEdBQUEsQ0FBQSxHQUFBLENBQUEsR0FBQSxDQUFBLEdBQTVDLENBQUE7QUFBQTtBQWJNLENBQXhCOztBQWdCQSxJQUFNLFFBQVE7QUFDWixtQkFBQTtBQURZLENBQWQ7O1FBS0UsSyxHQUFBLEsiLCJmaWxlIjoiZ2VuZXJhdGVkLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXNDb250ZW50IjpbIihmdW5jdGlvbigpe2Z1bmN0aW9uIHIoZSxuLHQpe2Z1bmN0aW9uIG8oaSxmKXtpZighbltpXSl7aWYoIWVbaV0pe3ZhciBjPVwiZnVuY3Rpb25cIj09dHlwZW9mIHJlcXVpcmUmJnJlcXVpcmU7aWYoIWYmJmMpcmV0dXJuIGMoaSwhMCk7aWYodSlyZXR1cm4gdShpLCEwKTt2YXIgYT1uZXcgRXJyb3IoXCJDYW5ub3QgZmluZCBtb2R1bGUgJ1wiK2krXCInXCIpO3Rocm93IGEuY29kZT1cIk1PRFVMRV9OT1RfRk9VTkRcIixhfXZhciBwPW5baV09e2V4cG9ydHM6e319O2VbaV1bMF0uY2FsbChwLmV4cG9ydHMsZnVuY3Rpb24ocil7dmFyIG49ZVtpXVsxXVtyXTtyZXR1cm4gbyhufHxyKX0scCxwLmV4cG9ydHMscixlLG4sdCl9cmV0dXJuIG5baV0uZXhwb3J0c31mb3IodmFyIHU9XCJmdW5jdGlvblwiPT10eXBlb2YgcmVxdWlyZSYmcmVxdWlyZSxpPTA7aTx0Lmxlbmd0aDtpKyspbyh0W2ldKTtyZXR1cm4gb31yZXR1cm4gcn0pKCkiLCJleHBvcnQgKiBmcm9tICcuL3NyYy9hbmltYXRpb24tam9iJztcbmV4cG9ydCAqIGZyb20gJy4vc3JjL2FuaW1hdG9yJztcbmV4cG9ydCAqIGZyb20gJy4vc3JjL2ZyYW1lLWxhdGVuY3ktcHJvZmlsZXInO1xuZXhwb3J0ICogZnJvbSAnLi9zcmMvcGVyc2lzdGVudC1hbmltYXRpb24tam9iJztcbmV4cG9ydCAqIGZyb20gJy4vc3JjL3RyYW5zaWVudC1hbmltYXRpb24tam9iJztcbiIsIi8qKlxuICogQW4gQW5pbWF0aW9uSm9iIGlzIHVzZWQgd2l0aCB0aGUgYW5pbWF0b3IgY29udHJvbGxlciB0byB1cGRhdGUgYW5kIHJlLWRyYXcgc29tZXRoaW5nIGVhY2ggZnJhbWUuXG4gKlxuICogQGFic3RyYWN0XG4gKi9cbmNsYXNzIEFuaW1hdGlvbkpvYiB7XG4gIC8qKlxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbb25Db21wbGV0ZV0gQSBjYWxsYmFjayB0byBiZSBjYWxsZWQgd2hlbiB0aGlzIEFuaW1hdGlvbkpvYiBpcyBmaW5pc2hlZC5cbiAgICovXG4gIGNvbnN0cnVjdG9yKG9uQ29tcGxldGUpIHtcbiAgICAvLyBBbmltYXRpb25Kb2IgaXMgYW4gYWJzdHJhY3QgY2xhc3MuIEl0IHNob3VsZCBub3QgYmUgaW5zdGFudGlhdGVkIGRpcmVjdGx5LlxuICAgIGlmIChuZXcudGFyZ2V0ID09PSBBbmltYXRpb25Kb2IpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0Nhbm5vdCBjb25zdHJ1Y3QgQW5pbWF0aW9uSm9iIGluc3RhbmNlcyBkaXJlY3RseScpO1xuICAgIH1cblxuICAgIHRoaXMuX3N0YXJ0VGltZSA9IDA7XG4gICAgdGhpcy5faXNDb21wbGV0ZSA9IHRydWU7XG4gICAgdGhpcy5fb25Db21wbGV0ZSA9IG9uQ29tcGxldGU7XG4gIH1cblxuICAvKipcbiAgICogSW5kaWNhdGVzIHdoZXRoZXIgdGhpcyBBbmltYXRpb25Kb2IgaXMgY29tcGxldGUuXG4gICAqXG4gICAqIEByZXR1cm4ge2Jvb2xlYW59XG4gICAqL1xuICBnZXQgaXNDb21wbGV0ZSgpIHtcbiAgICByZXR1cm4gdGhpcy5faXNDb21wbGV0ZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBTZXRzIHRoaXMgQW5pbWF0aW9uSm9iIGFzIHN0YXJ0ZWQuXG4gICAqXG4gICAqIEBwYXJhbSB7RE9NSGlnaFJlc1RpbWVTdGFtcH0gc3RhcnRUaW1lXG4gICAqL1xuICBzdGFydChzdGFydFRpbWUpIHtcbiAgICB0aGlzLl9zdGFydFRpbWUgPSBzdGFydFRpbWU7XG4gICAgdGhpcy5faXNDb21wbGV0ZSA9IGZhbHNlO1xuICB9XG5cbiAgLyoqXG4gICAqIFVwZGF0ZXMgdGhlIGFuaW1hdGlvbiBwcm9ncmVzcyBvZiB0aGlzIEFuaW1hdGlvbkpvYiB0byBtYXRjaCB0aGUgZ2l2ZW4gdGltZS5cbiAgICpcbiAgICogVGhpcyBpcyBjYWxsZWQgZnJvbSB0aGUgb3ZlcmFsbCBhbmltYXRpb24gbG9vcC5cbiAgICpcbiAgICogQHBhcmFtIHtET01IaWdoUmVzVGltZVN0YW1wfSBjdXJyZW50VGltZVxuICAgKiBAcGFyYW0ge0RPTUhpZ2hSZXNUaW1lU3RhbXB9IGRlbHRhVGltZVxuICAgKiBAYWJzdHJhY3RcbiAgICovXG4gIHVwZGF0ZShjdXJyZW50VGltZSwgZGVsdGFUaW1lKSB7XG4gICAgLy8gRXh0ZW5kaW5nIGNsYXNzZXMgc2hvdWxkIGltcGxlbWVudCB0aGlzIG1ldGhvZC5cbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdNZXRob2Qgbm90IGltcGxlbWVudGVkJyk7XG4gIH1cblxuICAvKipcbiAgICogRHJhd3MgdGhlIGN1cnJlbnQgc3RhdGUgb2YgdGhpcyBBbmltYXRpb25Kb2IuXG4gICAqXG4gICAqIFRoaXMgaXMgY2FsbGVkIGZyb20gdGhlIG92ZXJhbGwgYW5pbWF0aW9uIGxvb3AuXG4gICAqXG4gICAqIEBhYnN0cmFjdFxuICAgKi9cbiAgZHJhdygpIHtcbiAgICAvLyBFeHRlbmRpbmcgY2xhc3NlcyBzaG91bGQgaW1wbGVtZW50IHRoaXMgbWV0aG9kLlxuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ01ldGhvZCBub3QgaW1wbGVtZW50ZWQnKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBIYW5kbGVzIGFueSBuZWNlc3Nhcnkgc3RhdGUgZm9yIHRoaXMgQW5pbWF0aW9uSm9iIGJlaW5nIGZpbmlzaGVkLlxuICAgKlxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IGlzQ2FuY2VsbGVkXG4gICAqL1xuICBmaW5pc2goaXNDYW5jZWxsZWQpIHtcbiAgICBjb25zb2xlLmxvZyhgJHt0aGlzLmNvbnN0cnVjdG9yLm5hbWV9ICR7aXNDYW5jZWxsZWQgPyAnY2FuY2VsbGVkJyA6ICdjb21wbGV0ZWQnfWApO1xuXG4gICAgdGhpcy5faXNDb21wbGV0ZSA9IHRydWU7XG5cbiAgICBpZiAodGhpcy5fb25Db21wbGV0ZSkge1xuICAgICAgdGhpcy5fb25Db21wbGV0ZSgpO1xuICAgIH1cbiAgfVxufVxuXG5leHBvcnQge0FuaW1hdGlvbkpvYn07XG4iLCJpbXBvcnQge0ZyYW1lTGF0ZW5jeVByb2ZpbGVyfSBmcm9tICcuL2ZyYW1lLWxhdGVuY3ktcHJvZmlsZXInO1xuaW1wb3J0IHtQZXJzaXN0ZW50QW5pbWF0aW9uSm9ifSBmcm9tICcuL3BlcnNpc3RlbnQtYW5pbWF0aW9uLWpvYic7XG5pbXBvcnQge1RyYW5zaWVudEFuaW1hdGlvbkpvYn0gZnJvbSAnLi90cmFuc2llbnQtYW5pbWF0aW9uLWpvYic7XG5cbmNvbnN0IF9ERUxUQV9USU1FX1VQUEVSX1RIUkVTSE9MRCA9IDIwMDtcbmNvbnN0IF9GUkFNRV9EVVJBVElPTl9XQVJOSU5HX1RIUkVTSE9MRCA9IDEwMDAgLyAzMDtcbmNvbnN0IF9GUkFNRV9MQVRFTkNZX0xPR19QRVJJT0QgPSA1MDAwO1xuY29uc3QgX0xBVEVOQ1lfTE9HX0xBQkVMID0gJ0FuaW1hdGlvbiBmcmFtZSBwZXJpb2QnO1xuXG4vKipcbiAqIFRoaXMgY2xhc3MgaGFuZGxlcyB0aGUgYW5pbWF0aW9uIGxvb3AuXG4gKlxuICogVGhpcyBjbGFzcydzIHJlc3BvbnNpYmlsaXRpZXMgaW5jbHVkZTpcbiAqIC0gdXBkYXRpbmcgbW9kdWxlcyBmb3IgdGhlIGN1cnJlbnQgZnJhbWUsXG4gKiAtIGRyYXdpbmcgcmVuZGVyYWJsZXMgZm9yIHRoZSBjdXJyZW50IGZyYW1lLFxuICogLSBzdGFydGluZyBhbmQgc3RvcHBpbmcgdHJhbnNpZW50IGFuaW1hdGlvbiBqb2JzLFxuICogLSBjYXBwaW5nIHRpbWUgc3RlcCBkdXJhdGlvbnMgYXQgYSBtYXggdGhyZXNob2xkLlxuICovXG5jbGFzcyBBbmltYXRvciB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHRoaXMuX2pvYnMgPSBbXTtcbiAgICB0aGlzLl9wcmV2aW91c1RpbWUgPSBudWxsO1xuICAgIHRoaXMuX2lzUGF1c2VkID0gdHJ1ZTtcbiAgICB0aGlzLl9yZXF1ZXN0QW5pbWF0aW9uRnJhbWVJZCA9IG51bGw7XG4gICAgdGhpcy5fdG90YWxVbnBhdXNlZFJ1blRpbWUgPSAwO1xuICAgIHRoaXMuX2xhc3RVbnBhdXNlVGltZSA9IG51bGw7XG4gICAgdGhpcy5fbGF0ZW5jeVByb2ZpbGVyID0gbmV3IEZyYW1lTGF0ZW5jeVByb2ZpbGVyKF9GUkFNRV9MQVRFTkNZX0xPR19QRVJJT0QsXG4gICAgICAgIF9GUkFNRV9EVVJBVElPTl9XQVJOSU5HX1RIUkVTSE9MRCwgX0xBVEVOQ1lfTE9HX0xBQkVMKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBTdGFydHMgdGhlIGdpdmVuIEFuaW1hdGlvbkpvYi5cbiAgICpcbiAgICogQHBhcmFtIHtBbmltYXRpb25Kb2J9IGpvYlxuICAgKi9cbiAgc3RhcnRKb2Ioam9iKSB7XG4gICAgLy8gSXMgdGhpcyBhIHJlc3RhcnQ/XG4gICAgaWYgKCFqb2IuaXNDb21wbGV0ZSkge1xuICAgICAgY29uc29sZS5kZWJ1ZyhgUmVzdGFydGluZyBBbmltYXRpb25Kb2I6ICR7am9iLmNvbnN0cnVjdG9yLm5hbWV9YCk7XG5cbiAgICAgIGlmIChqb2IgaW5zdGFuY2VvZiBQZXJzaXN0ZW50QW5pbWF0aW9uSm9iKSB7XG4gICAgICAgIGpvYi5yZXNldCgpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgam9iLmZpbmlzaCh0cnVlKTtcbiAgICAgICAgam9iLnN0YXJ0KHdpbmRvdy5wZXJmb3JtYW5jZS5ub3coKSk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnNvbGUuZGVidWcoYFN0YXJ0aW5nIEFuaW1hdGlvbkpvYjogJHtqb2IuY29uc3RydWN0b3IubmFtZX1gKTtcblxuICAgICAgam9iLnN0YXJ0KHRoaXMuX3ByZXZpb3VzVGltZSk7XG4gICAgICB0aGlzLl9qb2JzLnB1c2goam9iKTtcbiAgICB9XG5cbiAgICB0aGlzLl9zdGFydEFuaW1hdGlvbkxvb3AoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDYW5jZWxzIHRoZSBnaXZlbiBBbmltYXRpb25Kb2IuXG4gICAqXG4gICAqIEBwYXJhbSB7QW5pbWF0aW9uSm9ifSBqb2JcbiAgICovXG4gIGNhbmNlbEpvYihqb2IpIHtcbiAgICBjb25zb2xlLmRlYnVnKGBDYW5jZWxsaW5nIEFuaW1hdGlvbkpvYjogJHtqb2IuY29uc3RydWN0b3IubmFtZX1gKTtcbiAgICBqb2IuZmluaXNoKHRydWUpO1xuICB9XG5cbiAgLyoqXG4gICAqIENhbmNlbHMgYWxsIHJ1bm5pbmcgQW5pbWF0aW9uSm9icy5cbiAgICovXG4gIGNhbmNlbEFsbCgpIHtcbiAgICB3aGlsZSAodGhpcy5fam9icy5sZW5ndGgpIHtcbiAgICAgIHRoaXMuY2FuY2VsSm9iKHRoaXMuX2pvYnNbMF0pO1xuICAgIH1cbiAgfVxuXG4gIC8qKiBAcmV0dXJucyB7RE9NSGlnaFJlc1RpbWVTdGFtcH0gKi9cbiAgZ2V0IGN1cnJlbnRUaW1lKCkge1xuICAgIHJldHVybiB0aGlzLl9wcmV2aW91c1RpbWU7XG4gIH1cblxuICAvKiogQHJldHVybnMge2Jvb2xlYW59ICovXG4gIGdldCBpc1BhdXNlZCgpIHtcbiAgICByZXR1cm4gdGhpcy5faXNQYXVzZWQ7XG4gIH1cblxuICBwYXVzZSgpIHtcbiAgICB0aGlzLl9zdG9wQW5pbWF0aW9uTG9vcCgpO1xuICAgIGNvbnNvbGUuZGVidWcoJ0FuaW1hdG9yIHBhdXNlZCcpO1xuICB9XG5cbiAgdW5wYXVzZSgpIHtcbiAgICB0aGlzLl9zdGFydEFuaW1hdGlvbkxvb3AoKTtcbiAgICBjb25zb2xlLmRlYnVnKCdBbmltYXRvciB1bnBhdXNlZCcpO1xuICB9XG5cbiAgLyoqXG4gICAqIFRoaXMgaXMgdGhlIGFuaW1hdGlvbiBsb29wIHRoYXQgZHJpdmVzIGFsbCBvZiB0aGUgYW5pbWF0aW9uLlxuICAgKlxuICAgKiBAcGFyYW0ge0RPTUhpZ2hSZXNUaW1lU3RhbXB9IGN1cnJlbnRUaW1lXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfYW5pbWF0aW9uTG9vcChjdXJyZW50VGltZSkge1xuICAgIC8vIFdoZW4gcGF1c2luZyBhbmQgcmVzdGFydGluZywgaXQncyBwb3NzaWJsZSBmb3IgdGhlIHByZXZpb3VzIHRpbWUgdG8gYmUgc2xpZ2h0bHkgaW5jb25zaXN0ZW50XG4gICAgLy8gd2l0aCB0aGUgYW5pbWF0aW9uRnJhbWUgdGltZS5cbiAgICBpZiAoY3VycmVudFRpbWUgPCB0aGlzLl9wcmV2aW91c1RpbWUpIHtcbiAgICAgIHRoaXMuX3ByZXZpb3VzVGltZSA9IGN1cnJlbnRUaW1lIC0gMTtcbiAgICB9XG5cbiAgICBsZXQgZGVsdGFUaW1lID0gY3VycmVudFRpbWUgLSB0aGlzLl9wcmV2aW91c1RpbWU7XG4gICAgdGhpcy5fcHJldmlvdXNUaW1lID0gY3VycmVudFRpbWU7XG5cbiAgICB0aGlzLl9sYXRlbmN5UHJvZmlsZXIucmVjb3JkRnJhbWVMYXRlbmN5KGRlbHRhVGltZSk7XG5cbiAgICAvLyBMYXJnZSBkZWxheXMgYmV0d2VlbiBmcmFtZXMgY2FuIGNhdXNlIGxlYWQgdG8gaW5zdGFiaWxpdHkgaW4gdGhlIHN5c3RlbSwgc28gdGhpcyBjYXBzIHRoZW0gdG9cbiAgICAvLyBhIG1heCB0aHJlc2hvbGQuXG4gICAgZGVsdGFUaW1lID0gZGVsdGFUaW1lID4gX0RFTFRBX1RJTUVfVVBQRVJfVEhSRVNIT0xEID9cbiAgICAgICAgX0RFTFRBX1RJTUVfVVBQRVJfVEhSRVNIT0xEIDogZGVsdGFUaW1lO1xuXG4gICAgaWYgKCF0aGlzLl9pc1BhdXNlZCkge1xuICAgICAgdGhpcy5fcmVxdWVzdEFuaW1hdGlvbkZyYW1lSWQgPVxuICAgICAgICAgIHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUoY3VycmVudFRpbWUgPT4gdGhpcy5fYW5pbWF0aW9uTG9vcChjdXJyZW50VGltZSkpO1xuICAgICAgdGhpcy5fdXBkYXRlSm9icyhjdXJyZW50VGltZSwgZGVsdGFUaW1lKTtcbiAgICAgIHRoaXMuX2RyYXdKb2JzKCk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFVwZGF0ZXMgYWxsIG9mIHRoZSBhY3RpdmUgQW5pbWF0aW9uSm9icy5cbiAgICpcbiAgICogQHBhcmFtIHtET01IaWdoUmVzVGltZVN0YW1wfSBjdXJyZW50VGltZVxuICAgKiBAcGFyYW0ge0RPTUhpZ2hSZXNUaW1lU3RhbXB9IGRlbHRhVGltZVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX3VwZGF0ZUpvYnMoY3VycmVudFRpbWUsIGRlbHRhVGltZSkge1xuICAgIGZvciAobGV0IGkgPSAwLCBjb3VudCA9IHRoaXMuX2pvYnMubGVuZ3RoOyBpIDwgY291bnQ7IGkrKykge1xuICAgICAgbGV0IGpvYiA9IHRoaXMuX2pvYnNbaV07XG5cbiAgICAgIC8vIFJlbW92ZSBqb2JzIGZyb20gdGhlIGxpc3QgYWZ0ZXIgdGhleSBhcmUgY29tcGxldGUuXG4gICAgICBpZiAoam9iLmlzQ29tcGxldGUpIHtcbiAgICAgICAgdGhpcy5fcmVtb3ZlSm9iKGpvYiwgaSk7XG4gICAgICAgIGktLTtcbiAgICAgICAgY291bnQtLTtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG5cbiAgICAgIC8vIENoZWNrIHdoZXRoZXIgdGhlIGpvYiBpcyB0cmFuc2llbnQgYW5kIGhhcyByZWFjaGVkIGl0cyBlbmQuXG4gICAgICBpZiAoam9iIGluc3RhbmNlb2YgVHJhbnNpZW50QW5pbWF0aW9uSm9iICYmIGpvYi5lbmRUaW1lIDwgY3VycmVudFRpbWUpIHtcbiAgICAgICAgam9iLmZpbmlzaChmYWxzZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBqb2IudXBkYXRlKGN1cnJlbnRUaW1lLCBkZWx0YVRpbWUpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBSZW1vdmVzIHRoZSBnaXZlbiBqb2IgZnJvbSB0aGUgY29sbGVjdGlvbiBvZiBhY3RpdmUsIGFuaW1hdGluZyBqb2JzLlxuICAgKlxuICAgKiBAcGFyYW0ge0FuaW1hdGlvbkpvYn0gam9iXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBbaW5kZXg9LTFdXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfcmVtb3ZlSm9iKGpvYiwgaW5kZXggPSAtMSkge1xuICAgIGNvbnNvbGUuZGVidWcoYFJlbW92aW5nIEFuaW1hdGlvbkpvYjogJHtqb2IuY29uc3RydWN0b3IubmFtZX1gKTtcblxuICAgIGlmIChpbmRleCA+PSAwKSB7XG4gICAgICB0aGlzLl9qb2JzLnNwbGljZShpbmRleCwgMSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnN0IGNvdW50ID0gdGhpcy5fam9icy5sZW5ndGg7XG4gICAgICBmb3IgKGluZGV4ID0gMDsgaW5kZXggPCBjb3VudDsgaW5kZXgrKykge1xuICAgICAgICBpZiAodGhpcy5fam9ic1tpbmRleF0gPT09IGpvYikge1xuICAgICAgICAgIHRoaXMuX2pvYnMuc3BsaWNlKGluZGV4LCAxKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIC8vIFN0b3AgdGhlIGFuaW1hdGlvbiBsb29wIHdoZW4gdGhlcmUgYXJlIG5vIG1vcmUgam9icyB0byBhbmltYXRlLlxuICAgIGlmICh0aGlzLl9qb2JzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgdGhpcy5fc3RvcEFuaW1hdGlvbkxvb3AoKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogRHJhd3MgYWxsIG9mIHRoZSBhY3RpdmUgQW5pbWF0aW9uSm9icy5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9kcmF3Sm9icygpIHtcbiAgICBmb3IgKGxldCBpID0gMCwgY291bnQgPSB0aGlzLl9qb2JzLmxlbmd0aDsgaSA8IGNvdW50OyBpKyspIHtcbiAgICAgIHRoaXMuX2pvYnNbaV0uZHJhdygpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBTdGFydHMgdGhlIGFuaW1hdGlvbiBsb29wIGlmIGl0IGlzIG5vdCBhbHJlYWR5IHJ1bm5pbmcuXG4gICAqXG4gICAqIFRoaXMgbWV0aG9kIGlzIGlkZW1wb3RlbnQuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfc3RhcnRBbmltYXRpb25Mb29wKCkge1xuICAgIGlmICh0aGlzLl9pc1BhdXNlZCkge1xuICAgICAgdGhpcy5fbGFzdFVucGF1c2VUaW1lID0gd2luZG93LnBlcmZvcm1hbmNlLm5vdygpO1xuICAgIH1cbiAgICB0aGlzLl9pc1BhdXNlZCA9IGZhbHNlO1xuXG4gICAgLy8gT25seSBhY3R1YWxseSBzdGFydCB0aGUgbG9vcCBpZiBpdCBpc24ndCBhbHJlYWR5IHJ1bm5pbmcgYW5kIHRoZSBwYWdlIGhhcyBmb2N1cy5cbiAgICBpZiAoIXRoaXMuX3JlcXVlc3RBbmltYXRpb25GcmFtZUlkICYmICFkb2N1bWVudC5oaWRkZW4pIHtcbiAgICAgIHRoaXMuX2xhdGVuY3lQcm9maWxlci5zdGFydCgpO1xuICAgICAgdGhpcy5fcHJldmlvdXNUaW1lID0gd2luZG93LnBlcmZvcm1hbmNlLm5vdygpO1xuICAgICAgdGhpcy5fcmVxdWVzdEFuaW1hdGlvbkZyYW1lSWQgPVxuICAgICAgICAgIHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUodGltZSA9PiB0aGlzLl9hbmltYXRpb25Mb29wKHRpbWUpKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogU3RvcHMgdGhlIGFuaW1hdGlvbiBsb29wLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX3N0b3BBbmltYXRpb25Mb29wKCkge1xuICAgIGlmICghdGhpcy5faXNQYXVzZWQpIHtcbiAgICAgIHRoaXMuX3RvdGFsVW5wYXVzZWRSdW5UaW1lICs9IHRoaXMuX3RpbWVTaW5jZUxhc3RQYXVzZWQ7XG4gICAgfVxuICAgIHRoaXMuX2lzUGF1c2VkID0gdHJ1ZTtcbiAgICB3aW5kb3cuY2FuY2VsQW5pbWF0aW9uRnJhbWUodGhpcy5fcmVxdWVzdEFuaW1hdGlvbkZyYW1lSWQpO1xuICAgIHRoaXMuX3JlcXVlc3RBbmltYXRpb25GcmFtZUlkID0gbnVsbDtcbiAgICB0aGlzLl9sYXRlbmN5UHJvZmlsZXIuc3RvcCgpO1xuICB9XG5cbiAgLyoqXG4gICAqIENyZWF0ZXMgYSBwcm9taXNlIHRoYXQgd2lsbCByZXNvbHZlIG9uIHRoZSBuZXh0IGFuaW1hdGlvbiBsb29wLlxuICAgKlxuICAgKiBAcmV0dXJucyB7UHJvbWlzZX1cbiAgICovXG4gIHJlc29sdmVPbk5leHRGcmFtZSgpIHtcbiAgICByZXR1cm4gbmV3IFByb21pc2Uod2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZSk7XG4gIH1cblxuICAvKipcbiAgICogR2V0cyB0aGUgdG90YWwgYW1vdW50IG9mIHRpbWUgdGhlIGFuaW1hdG9yIGhhcyBiZWVuIHJ1bm5pbmcgd2hpbGUgbm90IHBhdXNlZC5cbiAgICpcbiAgICogQHJldHVybnMge0RPTUhpZ2hSZXNUaW1lU3RhbXB9XG4gICAqL1xuICBnZXQgdG90YWxSdW5UaW1lKCkge1xuICAgIHJldHVybiB0aGlzLl9pc1BhdXNlZFxuICAgICAgICA/IHRoaXMuX3RvdGFsVW5wYXVzZWRSdW5UaW1lXG4gICAgICAgIDogdGhpcy5fdG90YWxVbnBhdXNlZFJ1blRpbWUgKyB0aGlzLl90aW1lU2luY2VMYXN0UGF1c2VkO1xuICB9XG5cbiAgLyoqXG4gICAqIEByZXR1cm5zIHtET01IaWdoUmVzVGltZVN0YW1wfVxuICAgKi9cbiAgZ2V0IF90aW1lU2luY2VMYXN0UGF1c2VkKCkge1xuICAgIHJldHVybiB3aW5kb3cucGVyZm9ybWFuY2Uubm93KCkgLSB0aGlzLl9sYXN0VW5wYXVzZVRpbWU7XG4gIH1cbn1cblxuY29uc3QgYW5pbWF0b3IgPSBuZXcgQW5pbWF0b3IoKTtcblxuZXhwb3J0IHthbmltYXRvcn07XG5cbi8qKlxuICogQHR5cGVkZWYge251bWJlcn0gRE9NSGlnaFJlc1RpbWVTdGFtcCBBIG51bWJlciBvZiBtaWxsaXNlY29uZHMsIGFjY3VyYXRlIHRvIG9uZSB0aG91c2FuZHRoIG9mIGFcbiAqIG1pbGxpc2Vjb25kLlxuICovXG5cbiIsIi8qKlxuICogVGhpcyBjbGFzcyBrZWVwcyB0cmFjayBvZiBhdmcvbWluL21heCBmcmFtZSBsYXRlbmNpZXMgb3ZlciB0aGUgbGFzdCBsb2dnaW5nIHRpbWUgcGVyaW9kIGFuZFxuICogcGVyaW9kaWNhbGx5IGxvZ3MgdGhlc2UgdmFsdWVzLlxuICovXG5jbGFzcyBGcmFtZUxhdGVuY3lQcm9maWxlciB7XG4gIC8qKlxuICAgKiBAcGFyYW0ge251bWJlcn0gbG9nUGVyaW9kIFRoZSBwZXJpb2QgYXQgd2hpY2ggdG8gcHJpbnQgbGF0ZW5jeSBsb2cgbWVzc2FnZXMuIEluIG1pbGxpc2Vjb25kcy5cbiAgICogQHBhcmFtIHtudW1iZXJ9IGxhdGVuY3lXYXJuaW5nVGhyZXNob2xkIElmIHRoZSBhdmVyYWdlIGxhdGVuY3kgZXhjZWVkcyB0aGlzIHRocmVzaG9sZCwgdGhlbiB0aGVcbiAgICogbG9nIG1lc3NhZ2UgaXMgc2hvd24gYXMgYSB3YXJuaW5nLiBJbiBtaWxsaXNlY29uZHMuXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBsb2dMYWJlbCBBIGxhYmVsIHRvIHNob3cgZm9yIGVhY2ggbGF0ZW5jeSBsb2cgbWVzc2FnZS5cbiAgICovXG4gIGNvbnN0cnVjdG9yKGxvZ1BlcmlvZCwgbGF0ZW5jeVdhcm5pbmdUaHJlc2hvbGQsIGxvZ0xhYmVsKSB7XG4gICAgdGhpcy5fbG9nUGVyaW9kID0gbG9nUGVyaW9kO1xuICAgIHRoaXMuX2xhdGVuY3lXYXJuaW5nVGhyZXNob2xkID0gbGF0ZW5jeVdhcm5pbmdUaHJlc2hvbGQ7XG4gICAgdGhpcy5fbG9nTGFiZWwgPSBsb2dMYWJlbDtcblxuICAgIHRoaXMuX2ZyYW1lQ291bnQgPSBudWxsO1xuICAgIHRoaXMuX21heEZyYW1lTGF0ZW5jeSA9IG51bGw7XG4gICAgdGhpcy5fbWluRnJhbWVMYXRlbmN5ID0gbnVsbDtcbiAgICB0aGlzLl9hdmdGcmFtZUxhdGVuY3kgPSBudWxsO1xuXG4gICAgdGhpcy5faW50ZXJ2YWxJZCA9IG51bGw7XG4gIH1cblxuICBzdGFydCgpIHtcbiAgICB0aGlzLnN0b3AoKTtcbiAgICB0aGlzLnJlc2V0KCk7XG5cbiAgICB0aGlzLl9pbnRlcnZhbElkID0gc2V0SW50ZXJ2YWwoKCkgPT4ge1xuICAgICAgdGhpcy5sb2dGcmFtZUxhdGVuY3koKTtcbiAgICAgIHRoaXMucmVzZXQoKTtcbiAgICB9LCB0aGlzLl9sb2dQZXJpb2QpO1xuICB9XG5cbiAgc3RvcCgpIHtcbiAgICBjbGVhckludGVydmFsKHRoaXMuX2ludGVydmFsSWQpO1xuICB9XG5cbiAgcmVzZXQoKSB7XG4gICAgdGhpcy5fZnJhbWVDb3VudCA9IDA7XG4gICAgdGhpcy5fbWF4RnJhbWVMYXRlbmN5ID0gTnVtYmVyLk1JTl9WQUxVRTtcbiAgICB0aGlzLl9taW5GcmFtZUxhdGVuY3kgPSBOdW1iZXIuTUFYX1ZBTFVFO1xuICAgIHRoaXMuX2F2Z0ZyYW1lTGF0ZW5jeSA9IDA7XG4gIH1cblxuICAvKipcbiAgICogS2VlcHMgdHJhY2sgb2YgYSBydW5uaW5nIGF2ZXJhZ2UsIG1pbiB2YWx1ZSwgYW5kIG1heCB2YWx1ZSBmb3IgdGhlIGZyYW1lIGxhdGVuY2llcy5cbiAgICpcbiAgICogQHBhcmFtIHtET01IaWdoUmVzVGltZVN0YW1wfSBmcmFtZUxhdGVuY3lcbiAgICovXG4gIHJlY29yZEZyYW1lTGF0ZW5jeShmcmFtZUxhdGVuY3kpIHtcbiAgICB0aGlzLl9mcmFtZUNvdW50Kys7XG4gICAgdGhpcy5fbWF4RnJhbWVMYXRlbmN5ID1cbiAgICAgICAgdGhpcy5fbWF4RnJhbWVMYXRlbmN5IDwgZnJhbWVMYXRlbmN5ID8gZnJhbWVMYXRlbmN5IDogdGhpcy5fbWF4RnJhbWVMYXRlbmN5O1xuICAgIHRoaXMuX21pbkZyYW1lTGF0ZW5jeSA9XG4gICAgICAgIHRoaXMuX21pbkZyYW1lTGF0ZW5jeSA+IGZyYW1lTGF0ZW5jeSA/IGZyYW1lTGF0ZW5jeSA6IHRoaXMuX21pbkZyYW1lTGF0ZW5jeTtcbiAgICB0aGlzLl9hdmdGcmFtZUxhdGVuY3kgPVxuICAgICAgICB0aGlzLl9hdmdGcmFtZUxhdGVuY3kgKyAoZnJhbWVMYXRlbmN5IC0gdGhpcy5fYXZnRnJhbWVMYXRlbmN5KSAvIHRoaXMuX2ZyYW1lQ291bnQ7XG4gIH1cblxuICBsb2dGcmFtZUxhdGVuY3koKSB7XG4gICAgaWYgKHRoaXMuX2ZyYW1lQ291bnQgPiAwKSB7XG4gICAgICBjb25zdCBtZXNzYWdlID0gYCR7dGhpcy5fbG9nTGFiZWx9OiAgQVZHPSR7dGhpcy5fYXZnRnJhbWVMYXRlbmN5LnRvRml4ZWQoMyl9ICBgICtcbiAgICAgICAgICBgKE1BWD0ke3RoaXMuX21heEZyYW1lTGF0ZW5jeS50b0ZpeGVkKDMpfTsgTUlOPSR7dGhpcy5fbWluRnJhbWVMYXRlbmN5LnRvRml4ZWQoMyl9KWA7XG4gICAgICBpZiAodGhpcy5fbWF4RnJhbWVMYXRlbmN5ID49IHRoaXMuX2xhdGVuY3lXYXJuaW5nVGhyZXNob2xkKSB7XG4gICAgICAgIGNvbnNvbGUud2FybihtZXNzYWdlKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNvbnNvbGUuZGVidWcobWVzc2FnZSk7XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbmV4cG9ydCB7RnJhbWVMYXRlbmN5UHJvZmlsZXJ9O1xuIiwiaW1wb3J0IHtBbmltYXRpb25Kb2J9IGZyb20gJy4vYW5pbWF0aW9uLWpvYic7XG5cbi8qKlxuICogQSBQZXJzaXN0ZW50QW5pbWF0aW9uSm9iIHJlY3VycyBvciBoYXMgYW4gaW5kZWZpbml0ZSBkdXJhdGlvbi5cbiAqXG4gKiBAYWJzdHJhY3RcbiAqL1xuY2xhc3MgUGVyc2lzdGVudEFuaW1hdGlvbkpvYiBleHRlbmRzIEFuaW1hdGlvbkpvYiB7XG4gIC8qKlxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbb25Db21wbGV0ZV0gQSBjYWxsYmFjayB0byBiZSBjYWxsZWQgd2hlbiB0aGlzIEFuaW1hdGlvbkpvYiBpcyBmaW5pc2hlZC5cbiAgICovXG4gIGNvbnN0cnVjdG9yKG9uQ29tcGxldGUpIHtcbiAgICBzdXBlcihvbkNvbXBsZXRlKTtcblxuICAgIC8vIFBlcnNpc3RlbnRBbmltYXRpb25Kb2IgaXMgYW4gYWJzdHJhY3QgY2xhc3MuIEl0IHNob3VsZCBub3QgYmUgaW5zdGFudGlhdGVkIGRpcmVjdGx5LlxuICAgIGlmIChuZXcudGFyZ2V0ID09PSBQZXJzaXN0ZW50QW5pbWF0aW9uSm9iKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdDYW5ub3QgY29uc3RydWN0IFBlcnNpc3RlbnRBbmltYXRpb25Kb2IgaW5zdGFuY2VzIGRpcmVjdGx5Jyk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEBhYnN0cmFjdFxuICAgKi9cbiAgcmVzZXQoKSB7XG4gICAgLy8gRXh0ZW5kaW5nIGNsYXNzZXMgc2hvdWxkIGltcGxlbWVudCB0aGlzIG1ldGhvZC5cbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdNZXRob2Qgbm90IGltcGxlbWVudGVkJyk7XG4gIH1cbn1cblxuZXhwb3J0IHtQZXJzaXN0ZW50QW5pbWF0aW9uSm9ifTtcbiIsImltcG9ydCB7X3V0aWx9IGZyb20gJy4vdXRpbCc7XG5cbmltcG9ydCB7QW5pbWF0aW9uSm9ifSBmcm9tICcuL2FuaW1hdGlvbi1qb2InO1xuXG4vKipcbiAqIEEgVHJhbnNpZW50QW5pbWF0aW9uSm9iIGlzIHRlbXBvcmFyeSBhbmQgaGFzIGEgZGVmaW5pdGUgYmVnaW5uaW5nIGFuZCBlbmQuXG4gKlxuICogQGFic3RyYWN0XG4gKi9cbmNsYXNzIFRyYW5zaWVudEFuaW1hdGlvbkpvYiBleHRlbmRzIEFuaW1hdGlvbkpvYiB7XG4gIC8qKlxuICAgKiBAcGFyYW0ge251bWJlcn0gZHVyYXRpb25cbiAgICogQHBhcmFtIHtudW1iZXJ9IGRlbGF5XG4gICAqIEBwYXJhbSB7RnVuY3Rpb258U3RyaW5nfSBlYXNpbmdGdW5jdGlvblxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbb25Db21wbGV0ZV0gQSBjYWxsYmFjayB0byBiZSBjYWxsZWQgd2hlbiB0aGlzIEFuaW1hdGlvbkpvYiBpcyBmaW5pc2hlZC5cbiAgICovXG4gIGNvbnN0cnVjdG9yKGR1cmF0aW9uLCBkZWxheSwgZWFzaW5nRnVuY3Rpb24sIG9uQ29tcGxldGUpIHtcbiAgICBzdXBlcihvbkNvbXBsZXRlKTtcblxuICAgIC8vIFRyYW5zaWVudEFuaW1hdGlvbkpvYiBpcyBhbiBhYnN0cmFjdCBjbGFzcy4gSXQgc2hvdWxkIG5vdCBiZSBpbnN0YW50aWF0ZWQgZGlyZWN0bHkuXG4gICAgaWYgKG5ldy50YXJnZXQgPT09IFRyYW5zaWVudEFuaW1hdGlvbkpvYikge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignQ2Fubm90IGNvbnN0cnVjdCBUcmFuc2llbnRBbmltYXRpb25Kb2IgaW5zdGFuY2VzIGRpcmVjdGx5Jyk7XG4gICAgfVxuXG4gICAgdGhpcy5fZHVyYXRpb24gPSBkdXJhdGlvbjtcbiAgICB0aGlzLl9kZWxheSA9IGRlbGF5O1xuICAgIHRoaXMuX2Vhc2luZ0Z1bmN0aW9uID0gdHlwZW9mIGVhc2luZ0Z1bmN0aW9uID09PSAnZnVuY3Rpb24nXG4gICAgICAgID8gZWFzaW5nRnVuY3Rpb25cbiAgICAgICAgOiBfdXRpbC5lYXNpbmdGdW5jdGlvbnNbZWFzaW5nRnVuY3Rpb25dO1xuICB9XG5cbiAgLyoqXG4gICAqIEByZXR1cm5zIHtudW1iZXJ9XG4gICAqL1xuICBnZXQgZW5kVGltZSgpIHtcbiAgICByZXR1cm4gdGhpcy5fc3RhcnRUaW1lICsgdGhpcy5fZHVyYXRpb24gKyB0aGlzLl9kZWxheTtcbiAgfVxufVxuXG5leHBvcnQge1RyYW5zaWVudEFuaW1hdGlvbkpvYn07XG4iLCIvKipcbiAqIFRoaXMgbW9kdWxlIGRlZmluZXMgYSBjb2xsZWN0aW9uIG9mIHN0YXRpYyB1dGlsaXR5IGZ1bmN0aW9ucy5cbiAqL1xuXG4vLyBBIGNvbGxlY3Rpb24gb2YgZGlmZmVyZW50IHR5cGVzIG9mIGVhc2luZyBmdW5jdGlvbnMuXG5jb25zdCBlYXNpbmdGdW5jdGlvbnMgPSB7XG4gIGxpbmVhcjogdCA9PiB0LFxuICBlYXNlSW5RdWFkOiB0ID0+IHQgKiB0LFxuICBlYXNlT3V0UXVhZDogdCA9PiB0ICogKDIgLSB0KSxcbiAgZWFzZUluT3V0UXVhZDogdCA9PiB0IDwgMC41ID8gMiAqIHQgKiB0IDogLTEgKyAoNCAtIDIgKiB0KSAqIHQsXG4gIGVhc2VJbkN1YmljOiB0ID0+IHQgKiB0ICogdCxcbiAgZWFzZU91dEN1YmljOiB0ID0+IDEgKyAtLXQgKiB0ICogdCxcbiAgZWFzZUluT3V0Q3ViaWM6IHQgPT4gdCA8IDAuNSA/IDQgKiB0ICogdCAqIHQgOiAodCAtIDEpICogKDIgKiB0IC0gMikgKiAoMiAqIHQgLSAyKSArIDEsXG4gIGVhc2VJblF1YXJ0OiB0ID0+IHQgKiB0ICogdCAqIHQsXG4gIGVhc2VPdXRRdWFydDogdCA9PiAxIC0gLS10ICogdCAqIHQgKiB0LFxuICBlYXNlSW5PdXRRdWFydDogdCA9PiB0IDwgMC41ID8gOCAqIHQgKiB0ICogdCAqIHQgOiAxIC0gOCAqIC0tdCAqIHQgKiB0ICogdCxcbiAgZWFzZUluUXVpbnQ6IHQgPT4gdCAqIHQgKiB0ICogdCAqIHQsXG4gIGVhc2VPdXRRdWludDogdCA9PiAxICsgLS10ICogdCAqIHQgKiB0ICogdCxcbiAgZWFzZUluT3V0UXVpbnQ6IHQgPT4gdCA8IDAuNSA/IDE2ICogdCAqIHQgKiB0ICogdCAqIHQgOiAxICsgMTYgKiAtLXQgKiB0ICogdCAqIHQgKiB0XG59O1xuXG5jb25zdCBfdXRpbCA9IHtcbiAgZWFzaW5nRnVuY3Rpb25zLFxufTtcblxuZXhwb3J0IHtcbiAgX3V0aWwsXG59O1xuIl19"}