{"version":3,"sources":["node_modules/browser-pack/_prelude.js","src/animation-job.js","src/animator.js","src/frame-latency-profiler.js","src/index.js","src/persistent-animation-job.js","src/transient-animation-job.js","src/util.js"],"names":[],"mappings":"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","file":"animatex.js","sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()","/**\r\n * An AnimationJob is used with the animator controller to update and re-draw something each frame.\r\n *\r\n * @abstract\r\n */\r\nclass AnimationJob {\r\n  /**\r\n   * @param {Function} [onComplete] A callback to be called when this AnimationJob is finished.\r\n   */\r\n  constructor(onComplete) {\r\n    // AnimationJob is an abstract class. It should not be instantiated directly.\r\n    if (new.target === AnimationJob) {\r\n      throw new TypeError('Cannot construct AnimationJob instances directly');\r\n    }\r\n\r\n    this._startTime = 0;\r\n    this._isComplete = true;\r\n    this._onComplete = onComplete;\r\n  }\r\n\r\n  /**\r\n   * Indicates whether this AnimationJob is complete.\r\n   *\r\n   * @return {boolean}\r\n   */\r\n  get isComplete() {\r\n    return this._isComplete;\r\n  }\r\n\r\n  /**\r\n   * Sets this AnimationJob as started.\r\n   *\r\n   * @param {DOMHighResTimeStamp} startTime\r\n   */\r\n  start(startTime) {\r\n    this._startTime = startTime;\r\n    this._isComplete = false;\r\n  }\r\n\r\n  /**\r\n   * Updates the animation progress of this AnimationJob to match the given time.\r\n   *\r\n   * This is called from the overall animation loop.\r\n   *\r\n   * @param {DOMHighResTimeStamp} currentTime\r\n   * @param {DOMHighResTimeStamp} deltaTime\r\n   * @abstract\r\n   */\r\n  update(currentTime, deltaTime) {\r\n    // Extending classes should implement this method.\r\n    throw new TypeError('Method not implemented');\r\n  }\r\n\r\n  /**\r\n   * Draws the current state of this AnimationJob.\r\n   *\r\n   * This is called from the overall animation loop.\r\n   *\r\n   * @abstract\r\n   */\r\n  draw() {\r\n    // Extending classes should implement this method.\r\n    throw new TypeError('Method not implemented');\r\n  }\r\n\r\n  /**\r\n   * Handles any necessary state for this AnimationJob being finished.\r\n   *\r\n   * @param {boolean} isCancelled\r\n   */\r\n  finish(isCancelled) {\r\n    console.log(`${this.constructor.name} ${isCancelled ? 'cancelled' : 'completed'}`);\r\n\r\n    this._isComplete = true;\r\n\r\n    if (this._onComplete) {\r\n      this._onComplete();\r\n    }\r\n  }\r\n}\r\n\r\nexport {AnimationJob};\r\n","import {FrameLatencyProfiler} from './frame-latency-profiler';\r\nimport {PersistentAnimationJob} from './persistent-animation-job';\r\nimport {TransientAnimationJob} from './transient-animation-job';\r\n\r\nconst _DELTA_TIME_UPPER_THRESHOLD = 200;\r\nconst _FRAME_DURATION_WARNING_THRESHOLD = 1000 / 30;\r\nconst _FRAME_LATENCY_LOG_PERIOD = 5000;\r\nconst _LATENCY_LOG_LABEL = 'Animation frame period';\r\n\r\n/**\r\n * This class handles the animation loop.\r\n *\r\n * This class's responsibilities include:\r\n * - updating modules for the current frame,\r\n * - drawing renderables for the current frame,\r\n * - starting and stopping transient animation jobs,\r\n * - capping time step durations at a max threshold.\r\n */\r\nclass Animator {\r\n  constructor() {\r\n    this._jobs = [];\r\n    this._previousTime = null;\r\n    this._isPaused = true;\r\n    this._requestAnimationFrameId = null;\r\n    this._totalUnpausedRunTime = 0;\r\n    this._lastUnpauseTime = null;\r\n    this._latencyProfiler = new FrameLatencyProfiler(_FRAME_LATENCY_LOG_PERIOD,\r\n        _FRAME_DURATION_WARNING_THRESHOLD, _LATENCY_LOG_LABEL);\r\n  }\r\n\r\n  /**\r\n   * Starts the given AnimationJob.\r\n   *\r\n   * @param {AnimationJob} job\r\n   */\r\n  startJob(job) {\r\n    // Is this a restart?\r\n    if (!job.isComplete) {\r\n      console.debug(`Restarting AnimationJob: ${job.constructor.name}`);\r\n\r\n      if (job instanceof PersistentAnimationJob) {\r\n        job.reset();\r\n      } else {\r\n        job.finish(true);\r\n        job.start(window.performance.now());\r\n      }\r\n    } else {\r\n      console.debug(`Starting AnimationJob: ${job.constructor.name}`);\r\n\r\n      job.start(this._previousTime);\r\n      this._jobs.push(job);\r\n    }\r\n\r\n    this._startAnimationLoop();\r\n  }\r\n\r\n  /**\r\n   * Cancels the given AnimationJob.\r\n   *\r\n   * @param {AnimationJob} job\r\n   */\r\n  cancelJob(job) {\r\n    console.debug(`Cancelling AnimationJob: ${job.constructor.name}`);\r\n    job.finish(true);\r\n  }\r\n\r\n  /**\r\n   * Cancels all running AnimationJobs.\r\n   */\r\n  cancelAll() {\r\n    while (this._jobs.length) {\r\n      this.cancelJob(this._jobs[0]);\r\n    }\r\n  }\r\n\r\n  /** @returns {DOMHighResTimeStamp} */\r\n  get currentTime() {\r\n    return this._previousTime;\r\n  }\r\n\r\n  /** @returns {boolean} */\r\n  get isPaused() {\r\n    return this._isPaused;\r\n  }\r\n\r\n  pause() {\r\n    this._stopAnimationLoop();\r\n    console.debug('Animator paused');\r\n  }\r\n\r\n  unpause() {\r\n    this._startAnimationLoop();\r\n    console.debug('Animator unpaused');\r\n  }\r\n\r\n  /**\r\n   * This is the animation loop that drives all of the animation.\r\n   *\r\n   * @param {DOMHighResTimeStamp} currentTime\r\n   * @private\r\n   */\r\n  _animationLoop(currentTime) {\r\n    // When pausing and restarting, it's possible for the previous time to be slightly inconsistent\r\n    // with the animationFrame time.\r\n    if (currentTime < this._previousTime) {\r\n      this._previousTime = currentTime - 1;\r\n    }\r\n\r\n    let deltaTime = currentTime - this._previousTime;\r\n    this._previousTime = currentTime;\r\n\r\n    this._latencyProfiler.recordFrameLatency(deltaTime);\r\n\r\n    // Large delays between frames can cause lead to instability in the system, so this caps them to\r\n    // a max threshold.\r\n    deltaTime = deltaTime > _DELTA_TIME_UPPER_THRESHOLD ?\r\n        _DELTA_TIME_UPPER_THRESHOLD : deltaTime;\r\n\r\n    if (!this._isPaused) {\r\n      this._requestAnimationFrameId =\r\n          window.requestAnimationFrame(currentTime => this._animationLoop(currentTime));\r\n      this._updateJobs(currentTime, deltaTime);\r\n      this._drawJobs();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Updates all of the active AnimationJobs.\r\n   *\r\n   * @param {DOMHighResTimeStamp} currentTime\r\n   * @param {DOMHighResTimeStamp} deltaTime\r\n   * @private\r\n   */\r\n  _updateJobs(currentTime, deltaTime) {\r\n    for (let i = 0, count = this._jobs.length; i < count; i++) {\r\n      let job = this._jobs[i];\r\n\r\n      // Remove jobs from the list after they are complete.\r\n      if (job.isComplete) {\r\n        this._removeJob(job, i);\r\n        i--;\r\n        count--;\r\n        continue;\r\n      }\r\n\r\n      // Check whether the job is transient and has reached its end.\r\n      if (job instanceof TransientAnimationJob && job.endTime < currentTime) {\r\n        job.finish(false);\r\n      } else {\r\n        job.update(currentTime, deltaTime);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Removes the given job from the collection of active, animating jobs.\r\n   *\r\n   * @param {AnimationJob} job\r\n   * @param {number} [index=-1]\r\n   * @private\r\n   */\r\n  _removeJob(job, index = -1) {\r\n    console.debug(`Removing AnimationJob: ${job.constructor.name}`);\r\n\r\n    if (index >= 0) {\r\n      this._jobs.splice(index, 1);\r\n    } else {\r\n      const count = this._jobs.length;\r\n      for (index = 0; index < count; index++) {\r\n        if (this._jobs[index] === job) {\r\n          this._jobs.splice(index, 1);\r\n          break;\r\n        }\r\n      }\r\n    }\r\n\r\n    // Stop the animation loop when there are no more jobs to animate.\r\n    if (this._jobs.length === 0) {\r\n      this._stopAnimationLoop();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Draws all of the active AnimationJobs.\r\n   *\r\n   * @private\r\n   */\r\n  _drawJobs() {\r\n    for (let i = 0, count = this._jobs.length; i < count; i++) {\r\n      this._jobs[i].draw();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Starts the animation loop if it is not already running.\r\n   *\r\n   * This method is idempotent.\r\n   *\r\n   * @private\r\n   */\r\n  _startAnimationLoop() {\r\n    if (this._isPaused) {\r\n      this._lastUnpauseTime = window.performance.now();\r\n    }\r\n    this._isPaused = false;\r\n\r\n    // Only actually start the loop if it isn't already running and the page has focus.\r\n    if (!this._requestAnimationFrameId && !document.hidden) {\r\n      this._latencyProfiler.start();\r\n      this._previousTime = window.performance.now();\r\n      this._requestAnimationFrameId =\r\n          window.requestAnimationFrame(time => this._animationLoop(time));\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Stops the animation loop.\r\n   *\r\n   * @private\r\n   */\r\n  _stopAnimationLoop() {\r\n    if (!this._isPaused) {\r\n      this._totalUnpausedRunTime += this._timeSinceLastPaused;\r\n    }\r\n    this._isPaused = true;\r\n    window.cancelAnimationFrame(this._requestAnimationFrameId);\r\n    this._requestAnimationFrameId = null;\r\n    this._latencyProfiler.stop();\r\n  }\r\n\r\n  /**\r\n   * Creates a promise that will resolve on the next animation loop.\r\n   *\r\n   * @returns {Promise}\r\n   */\r\n  resolveOnNextFrame() {\r\n    return new Promise(window.requestAnimationFrame);\r\n  }\r\n\r\n  /**\r\n   * Gets the total amount of time the animator has been running while not paused.\r\n   *\r\n   * @returns {DOMHighResTimeStamp}\r\n   */\r\n  get totalRunTime() {\r\n    return this._isPaused\r\n        ? this._totalUnpausedRunTime\r\n        : this._totalUnpausedRunTime + this._timeSinceLastPaused;\r\n  }\r\n\r\n  /**\r\n   * @returns {DOMHighResTimeStamp}\r\n   */\r\n  get _timeSinceLastPaused() {\r\n    return window.performance.now() - this._lastUnpauseTime;\r\n  }\r\n}\r\n\r\nconst animator = new Animator();\r\n\r\nexport {animator};\r\n\r\n/**\r\n * @typedef {number} DOMHighResTimeStamp A number of milliseconds, accurate to one thousandth of a\r\n * millisecond.\r\n */\r\n\r\n","/**\r\n * This class keeps track of avg/min/max frame latencies over the last logging time period and\r\n * periodically logs these values.\r\n */\r\nclass FrameLatencyProfiler {\r\n  /**\r\n   * @param {number} logPeriod The period at which to print latency log messages. In milliseconds.\r\n   * @param {number} latencyWarningThreshold If the average latency exceeds this threshold, then the\r\n   * log message is shown as a warning. In milliseconds.\r\n   * @param {string} logLabel A label to show for each latency log message.\r\n   */\r\n  constructor(logPeriod, latencyWarningThreshold, logLabel) {\r\n    this._logPeriod = logPeriod;\r\n    this._latencyWarningThreshold = latencyWarningThreshold;\r\n    this._logLabel = logLabel;\r\n\r\n    this._frameCount = null;\r\n    this._maxFrameLatency = null;\r\n    this._minFrameLatency = null;\r\n    this._avgFrameLatency = null;\r\n\r\n    this._intervalId = null;\r\n  }\r\n\r\n  start() {\r\n    this.stop();\r\n    this.reset();\r\n\r\n    this._intervalId = setInterval(() => {\r\n      this.logFrameLatency();\r\n      this.reset();\r\n    }, this._logPeriod);\r\n  }\r\n\r\n  stop() {\r\n    clearInterval(this._intervalId);\r\n  }\r\n\r\n  reset() {\r\n    this._frameCount = 0;\r\n    this._maxFrameLatency = Number.MIN_VALUE;\r\n    this._minFrameLatency = Number.MAX_VALUE;\r\n    this._avgFrameLatency = 0;\r\n  }\r\n\r\n  /**\r\n   * Keeps track of a running average, min value, and max value for the frame latencies.\r\n   *\r\n   * @param {DOMHighResTimeStamp} frameLatency\r\n   */\r\n  recordFrameLatency(frameLatency) {\r\n    this._frameCount++;\r\n    this._maxFrameLatency =\r\n        this._maxFrameLatency < frameLatency ? frameLatency : this._maxFrameLatency;\r\n    this._minFrameLatency =\r\n        this._minFrameLatency > frameLatency ? frameLatency : this._minFrameLatency;\r\n    this._avgFrameLatency =\r\n        this._avgFrameLatency + (frameLatency - this._avgFrameLatency) / this._frameCount;\r\n  }\r\n\r\n  logFrameLatency() {\r\n    if (this._frameCount > 0) {\r\n      const message = `${this._logLabel}:  AVG=${this._avgFrameLatency.toFixed(3)}  ` +\r\n          `(MAX=${this._maxFrameLatency.toFixed(3)}; MIN=${this._minFrameLatency.toFixed(3)})`;\r\n      if (this._maxFrameLatency >= this._latencyWarningThreshold) {\r\n        console.warn(message);\r\n      } else {\r\n        console.debug(message);\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nexport {FrameLatencyProfiler};\r\n","export * from './animation-job';\r\nexport * from './animator';\r\nexport * from './frame-latency-profiler';\r\nexport * from './persistent-animation-job';\r\nexport * from './transient-animation-job';\r\n","import {AnimationJob} from './animation-job';\r\n\r\n/**\r\n * A PersistentAnimationJob recurs or has an indefinite duration.\r\n *\r\n * @abstract\r\n */\r\nclass PersistentAnimationJob extends AnimationJob {\r\n  /**\r\n   * @param {Function} [onComplete] A callback to be called when this AnimationJob is finished.\r\n   */\r\n  constructor(onComplete) {\r\n    super(onComplete);\r\n\r\n    // PersistentAnimationJob is an abstract class. It should not be instantiated directly.\r\n    if (new.target === PersistentAnimationJob) {\r\n      throw new TypeError('Cannot construct PersistentAnimationJob instances directly');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @abstract\r\n   */\r\n  reset() {\r\n    // Extending classes should implement this method.\r\n    throw new TypeError('Method not implemented');\r\n  }\r\n}\r\n\r\nexport {PersistentAnimationJob};\r\n","import {_util} from './util';\r\n\r\nimport {AnimationJob} from './animation-job';\r\n\r\n/**\r\n * A TransientAnimationJob is temporary and has a definite beginning and end.\r\n *\r\n * @abstract\r\n */\r\nclass TransientAnimationJob extends AnimationJob {\r\n  /**\r\n   * @param {number} duration\r\n   * @param {number} delay\r\n   * @param {Function|String} easingFunction\r\n   * @param {Function} [onComplete] A callback to be called when this AnimationJob is finished.\r\n   */\r\n  constructor(duration, delay, easingFunction, onComplete) {\r\n    super(onComplete);\r\n\r\n    // TransientAnimationJob is an abstract class. It should not be instantiated directly.\r\n    if (new.target === TransientAnimationJob) {\r\n      throw new TypeError('Cannot construct TransientAnimationJob instances directly');\r\n    }\r\n\r\n    this._duration = duration;\r\n    this._delay = delay;\r\n    this._easingFunction = typeof easingFunction === 'function'\r\n        ? easingFunction\r\n        : _util.easingFunctions[easingFunction];\r\n  }\r\n\r\n  /**\r\n   * @returns {number}\r\n   */\r\n  get endTime() {\r\n    return this._startTime + this._duration + this._delay;\r\n  }\r\n}\r\n\r\nexport {TransientAnimationJob};\r\n","/**\r\n * This module defines a collection of static utility functions.\r\n */\r\n\r\n// A collection of different types of easing functions.\r\nconst easingFunctions = {\r\n  linear: t => t,\r\n  easeInQuad: t => t * t,\r\n  easeOutQuad: t => t * (2 - t),\r\n  easeInOutQuad: t => t < 0.5 ? 2 * t * t : -1 + (4 - 2 * t) * t,\r\n  easeInCubic: t => t * t * t,\r\n  easeOutCubic: t => 1 + --t * t * t,\r\n  easeInOutCubic: t => t < 0.5 ? 4 * t * t * t : (t - 1) * (2 * t - 2) * (2 * t - 2) + 1,\r\n  easeInQuart: t => t * t * t * t,\r\n  easeOutQuart: t => 1 - --t * t * t * t,\r\n  easeInOutQuart: t => t < 0.5 ? 8 * t * t * t * t : 1 - 8 * --t * t * t * t,\r\n  easeInQuint: t => t * t * t * t * t,\r\n  easeOutQuint: t => 1 + --t * t * t * t * t,\r\n  easeInOutQuint: t => t < 0.5 ? 16 * t * t * t * t * t : 1 + 16 * --t * t * t * t * t\r\n};\r\n\r\nconst _util = {\r\n  easingFunctions,\r\n};\r\n\r\nexport {\r\n  _util,\r\n};\r\n"],"preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,"}