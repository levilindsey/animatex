{"version":3,"sources":["node_modules/browser-pack/_prelude.js","src/animation-job.js","src/animator.js","src/frame-latency-profiler.js","src/index.js","src/persistent-animation-job.js","src/transient-animation-job.js","src/util.js"],"names":[],"mappings":"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","file":"animatex.js","sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()","/**\n * An AnimationJob is used with the animator controller to update and re-draw something each frame.\n *\n * @abstract\n */\nclass AnimationJob {\n  /**\n   * @param {Function} [onComplete] A callback to be called when this AnimationJob is finished.\n   */\n  constructor(onComplete) {\n    // AnimationJob is an abstract class. It should not be instantiated directly.\n    if (new.target === AnimationJob) {\n      throw new TypeError('Cannot construct AnimationJob instances directly');\n    }\n\n    this._startTime = 0;\n    this._isComplete = true;\n    this._onComplete = onComplete;\n  }\n\n  /**\n   * Indicates whether this AnimationJob is complete.\n   *\n   * @return {boolean}\n   */\n  get isComplete() {\n    return this._isComplete;\n  }\n\n  /**\n   * Sets this AnimationJob as started.\n   *\n   * @param {DOMHighResTimeStamp} startTime\n   */\n  start(startTime) {\n    this._startTime = startTime;\n    this._isComplete = false;\n  }\n\n  /**\n   * Updates the animation progress of this AnimationJob to match the given time.\n   *\n   * This is called from the overall animation loop.\n   *\n   * @param {DOMHighResTimeStamp} currentTime\n   * @param {DOMHighResTimeStamp} deltaTime\n   * @abstract\n   */\n  update(currentTime, deltaTime) {\n    // Extending classes should implement this method.\n    throw new TypeError('Method not implemented');\n  }\n\n  /**\n   * Draws the current state of this AnimationJob.\n   *\n   * This is called from the overall animation loop.\n   *\n   * @abstract\n   */\n  draw() {\n    // Extending classes should implement this method.\n    throw new TypeError('Method not implemented');\n  }\n\n  /**\n   * Handles any necessary state for this AnimationJob being finished.\n   *\n   * @param {boolean} isCancelled\n   */\n  finish(isCancelled) {\n    console.log(`${this.constructor.name} ${isCancelled ? 'cancelled' : 'completed'}`);\n\n    this._isComplete = true;\n\n    if (this._onComplete) {\n      this._onComplete();\n    }\n  }\n}\n\nexport {AnimationJob};\n","import {FrameLatencyProfiler} from './frame-latency-profiler';\nimport {PersistentAnimationJob} from './persistent-animation-job';\nimport {TransientAnimationJob} from './transient-animation-job';\n\nconst _DELTA_TIME_UPPER_THRESHOLD = 200;\nconst _FRAME_DURATION_WARNING_THRESHOLD = 1000 / 30;\nconst _FRAME_LATENCY_LOG_PERIOD = 5000;\nconst _LATENCY_LOG_LABEL = 'Animation frame period';\n\n/**\n * This class handles the animation loop.\n *\n * This class's responsibilities include:\n * - updating modules for the current frame,\n * - drawing renderables for the current frame,\n * - starting and stopping transient animation jobs,\n * - capping time step durations at a max threshold.\n */\nclass Animator {\n  constructor() {\n    this._jobs = [];\n    this._previousTime = null;\n    this._isPaused = true;\n    this._requestAnimationFrameId = null;\n    this._totalUnpausedRunTime = 0;\n    this._lastUnpauseTime = null;\n    this._latencyProfiler = new FrameLatencyProfiler(_FRAME_LATENCY_LOG_PERIOD,\n        _FRAME_DURATION_WARNING_THRESHOLD, _LATENCY_LOG_LABEL);\n  }\n\n  /**\n   * Starts the given AnimationJob.\n   *\n   * @param {AnimationJob} job\n   */\n  startJob(job) {\n    // Is this a restart?\n    if (!job.isComplete) {\n      console.debug(`Restarting AnimationJob: ${job.constructor.name}`);\n\n      if (job instanceof PersistentAnimationJob) {\n        job.reset();\n      } else {\n        job.finish(true);\n        job.start(window.performance.now());\n      }\n    } else {\n      console.debug(`Starting AnimationJob: ${job.constructor.name}`);\n\n      job.start(this._previousTime);\n      this._jobs.push(job);\n    }\n\n    this._startAnimationLoop();\n  }\n\n  /**\n   * Cancels the given AnimationJob.\n   *\n   * @param {AnimationJob} job\n   */\n  cancelJob(job) {\n    console.debug(`Cancelling AnimationJob: ${job.constructor.name}`);\n    job.finish(true);\n  }\n\n  /**\n   * Cancels all running AnimationJobs.\n   */\n  cancelAll() {\n    while (this._jobs.length) {\n      this.cancelJob(this._jobs[0]);\n    }\n  }\n\n  /** @returns {DOMHighResTimeStamp} */\n  get currentTime() {\n    return this._previousTime;\n  }\n\n  /** @returns {boolean} */\n  get isPaused() {\n    return this._isPaused;\n  }\n\n  pause() {\n    this._stopAnimationLoop();\n    console.debug('Animator paused');\n  }\n\n  unpause() {\n    this._startAnimationLoop();\n    console.debug('Animator unpaused');\n  }\n\n  /**\n   * This is the animation loop that drives all of the animation.\n   *\n   * @param {DOMHighResTimeStamp} currentTime\n   * @private\n   */\n  _animationLoop(currentTime) {\n    // When pausing and restarting, it's possible for the previous time to be slightly inconsistent\n    // with the animationFrame time.\n    if (currentTime < this._previousTime) {\n      this._previousTime = currentTime - 1;\n    }\n\n    let deltaTime = currentTime - this._previousTime;\n    this._previousTime = currentTime;\n\n    this._latencyProfiler.recordFrameLatency(deltaTime);\n\n    // Large delays between frames can cause lead to instability in the system, so this caps them to\n    // a max threshold.\n    deltaTime = deltaTime > _DELTA_TIME_UPPER_THRESHOLD ?\n        _DELTA_TIME_UPPER_THRESHOLD : deltaTime;\n\n    if (!this._isPaused) {\n      this._requestAnimationFrameId =\n          window.requestAnimationFrame(currentTime => this._animationLoop(currentTime));\n      this._updateJobs(currentTime, deltaTime);\n      this._drawJobs();\n    }\n  }\n\n  /**\n   * Updates all of the active AnimationJobs.\n   *\n   * @param {DOMHighResTimeStamp} currentTime\n   * @param {DOMHighResTimeStamp} deltaTime\n   * @private\n   */\n  _updateJobs(currentTime, deltaTime) {\n    for (let i = 0, count = this._jobs.length; i < count; i++) {\n      let job = this._jobs[i];\n\n      // Remove jobs from the list after they are complete.\n      if (job.isComplete) {\n        this._removeJob(job, i);\n        i--;\n        count--;\n        continue;\n      }\n\n      // Check whether the job is transient and has reached its end.\n      if (job instanceof TransientAnimationJob && job.endTime < currentTime) {\n        job.finish(false);\n      } else {\n        job.update(currentTime, deltaTime);\n      }\n    }\n  }\n\n  /**\n   * Removes the given job from the collection of active, animating jobs.\n   *\n   * @param {AnimationJob} job\n   * @param {number} [index=-1]\n   * @private\n   */\n  _removeJob(job, index = -1) {\n    console.debug(`Removing AnimationJob: ${job.constructor.name}`);\n\n    if (index >= 0) {\n      this._jobs.splice(index, 1);\n    } else {\n      const count = this._jobs.length;\n      for (index = 0; index < count; index++) {\n        if (this._jobs[index] === job) {\n          this._jobs.splice(index, 1);\n          break;\n        }\n      }\n    }\n\n    // Stop the animation loop when there are no more jobs to animate.\n    if (this._jobs.length === 0) {\n      this._stopAnimationLoop();\n    }\n  }\n\n  /**\n   * Draws all of the active AnimationJobs.\n   *\n   * @private\n   */\n  _drawJobs() {\n    for (let i = 0, count = this._jobs.length; i < count; i++) {\n      this._jobs[i].draw();\n    }\n  }\n\n  /**\n   * Starts the animation loop if it is not already running.\n   *\n   * This method is idempotent.\n   *\n   * @private\n   */\n  _startAnimationLoop() {\n    if (this._isPaused) {\n      this._lastUnpauseTime = window.performance.now();\n    }\n    this._isPaused = false;\n\n    // Only actually start the loop if it isn't already running and the page has focus.\n    if (!this._requestAnimationFrameId && !document.hidden) {\n      this._latencyProfiler.start();\n      this._previousTime = window.performance.now();\n      this._requestAnimationFrameId =\n          window.requestAnimationFrame(time => this._animationLoop(time));\n    }\n  }\n\n  /**\n   * Stops the animation loop.\n   *\n   * @private\n   */\n  _stopAnimationLoop() {\n    if (!this._isPaused) {\n      this._totalUnpausedRunTime += this._timeSinceLastPaused;\n    }\n    this._isPaused = true;\n    window.cancelAnimationFrame(this._requestAnimationFrameId);\n    this._requestAnimationFrameId = null;\n    this._latencyProfiler.stop();\n  }\n\n  /**\n   * Creates a promise that will resolve on the next animation loop.\n   *\n   * @returns {Promise}\n   */\n  resolveOnNextFrame() {\n    return new Promise(window.requestAnimationFrame);\n  }\n\n  /**\n   * Gets the total amount of time the animator has been running while not paused.\n   *\n   * @returns {DOMHighResTimeStamp}\n   */\n  get totalRunTime() {\n    return this._isPaused\n        ? this._totalUnpausedRunTime\n        : this._totalUnpausedRunTime + this._timeSinceLastPaused;\n  }\n\n  /**\n   * @returns {DOMHighResTimeStamp}\n   */\n  get _timeSinceLastPaused() {\n    return window.performance.now() - this._lastUnpauseTime;\n  }\n}\n\nconst animator = new Animator();\n\nexport {animator};\n\n/**\n * @typedef {number} DOMHighResTimeStamp A number of milliseconds, accurate to one thousandth of a\n * millisecond.\n */\n\n","/**\n * This class keeps track of avg/min/max frame latencies over the last logging time period and\n * periodically logs these values.\n */\nclass FrameLatencyProfiler {\n  /**\n   * @param {number} logPeriod The period at which to print latency log messages. In milliseconds.\n   * @param {number} latencyWarningThreshold If the average latency exceeds this threshold, then the\n   * log message is shown as a warning. In milliseconds.\n   * @param {string} logLabel A label to show for each latency log message.\n   */\n  constructor(logPeriod, latencyWarningThreshold, logLabel) {\n    this._logPeriod = logPeriod;\n    this._latencyWarningThreshold = latencyWarningThreshold;\n    this._logLabel = logLabel;\n\n    this._frameCount = null;\n    this._maxFrameLatency = null;\n    this._minFrameLatency = null;\n    this._avgFrameLatency = null;\n\n    this._intervalId = null;\n  }\n\n  start() {\n    this.stop();\n    this.reset();\n\n    this._intervalId = setInterval(() => {\n      this.logFrameLatency();\n      this.reset();\n    }, this._logPeriod);\n  }\n\n  stop() {\n    clearInterval(this._intervalId);\n  }\n\n  reset() {\n    this._frameCount = 0;\n    this._maxFrameLatency = Number.MIN_VALUE;\n    this._minFrameLatency = Number.MAX_VALUE;\n    this._avgFrameLatency = 0;\n  }\n\n  /**\n   * Keeps track of a running average, min value, and max value for the frame latencies.\n   *\n   * @param {DOMHighResTimeStamp} frameLatency\n   */\n  recordFrameLatency(frameLatency) {\n    this._frameCount++;\n    this._maxFrameLatency =\n        this._maxFrameLatency < frameLatency ? frameLatency : this._maxFrameLatency;\n    this._minFrameLatency =\n        this._minFrameLatency > frameLatency ? frameLatency : this._minFrameLatency;\n    this._avgFrameLatency =\n        this._avgFrameLatency + (frameLatency - this._avgFrameLatency) / this._frameCount;\n  }\n\n  logFrameLatency() {\n    if (this._frameCount > 0) {\n      const message = `${this._logLabel}:  AVG=${this._avgFrameLatency.toFixed(3)}  ` +\n          `(MAX=${this._maxFrameLatency.toFixed(3)}; MIN=${this._minFrameLatency.toFixed(3)})`;\n      if (this._maxFrameLatency >= this._latencyWarningThreshold) {\n        console.warn(message);\n      } else {\n        console.debug(message);\n      }\n    }\n  }\n}\n\nexport {FrameLatencyProfiler};\n","export * from './animation-job';\nexport * from './animator';\nexport * from './frame-latency-profiler';\nexport * from './persistent-animation-job';\nexport * from './transient-animation-job';\n","import {AnimationJob} from './animation-job';\n\n/**\n * A PersistentAnimationJob recurs or has an indefinite duration.\n *\n * @abstract\n */\nclass PersistentAnimationJob extends AnimationJob {\n  /**\n   * @param {Function} [onComplete] A callback to be called when this AnimationJob is finished.\n   */\n  constructor(onComplete) {\n    super(onComplete);\n\n    // PersistentAnimationJob is an abstract class. It should not be instantiated directly.\n    if (new.target === PersistentAnimationJob) {\n      throw new TypeError('Cannot construct PersistentAnimationJob instances directly');\n    }\n  }\n\n  /**\n   * @abstract\n   */\n  reset() {\n    // Extending classes should implement this method.\n    throw new TypeError('Method not implemented');\n  }\n}\n\nexport {PersistentAnimationJob};\n","import {_util} from './util';\n\nimport {AnimationJob} from './animation-job';\n\n/**\n * A TransientAnimationJob is temporary and has a definite beginning and end.\n *\n * @abstract\n */\nclass TransientAnimationJob extends AnimationJob {\n  /**\n   * @param {number} duration\n   * @param {number} delay\n   * @param {Function|String} easingFunction\n   * @param {Function} [onComplete] A callback to be called when this AnimationJob is finished.\n   */\n  constructor(duration, delay, easingFunction, onComplete) {\n    super(onComplete);\n\n    // TransientAnimationJob is an abstract class. It should not be instantiated directly.\n    if (new.target === TransientAnimationJob) {\n      throw new TypeError('Cannot construct TransientAnimationJob instances directly');\n    }\n\n    this._duration = duration;\n    this._delay = delay;\n    this._easingFunction = typeof easingFunction === 'function'\n        ? easingFunction\n        : _util.easingFunctions[easingFunction];\n  }\n\n  /**\n   * @returns {number}\n   */\n  get endTime() {\n    return this._startTime + this._duration + this._delay;\n  }\n}\n\nexport {TransientAnimationJob};\n","/**\n * This module defines a collection of static utility functions.\n */\n\n// A collection of different types of easing functions.\nconst easingFunctions = {\n  linear: t => t,\n  easeInQuad: t => t * t,\n  easeOutQuad: t => t * (2 - t),\n  easeInOutQuad: t => t < 0.5 ? 2 * t * t : -1 + (4 - 2 * t) * t,\n  easeInCubic: t => t * t * t,\n  easeOutCubic: t => 1 + --t * t * t,\n  easeInOutCubic: t => t < 0.5 ? 4 * t * t * t : (t - 1) * (2 * t - 2) * (2 * t - 2) + 1,\n  easeInQuart: t => t * t * t * t,\n  easeOutQuart: t => 1 - --t * t * t * t,\n  easeInOutQuart: t => t < 0.5 ? 8 * t * t * t * t : 1 - 8 * --t * t * t * t,\n  easeInQuint: t => t * t * t * t * t,\n  easeOutQuint: t => 1 + --t * t * t * t * t,\n  easeInOutQuint: t => t < 0.5 ? 16 * t * t * t * t * t : 1 + 16 * --t * t * t * t * t\n};\n\nconst _util = {\n  easingFunctions,\n};\n\nexport {\n  _util,\n};\n"],"preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,"}